<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  load_and_authorize_resource
  include Pagy::Backend

  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]
  before_action :set_<%= plural_table_name %>, only: :index
  before_action :disabled_pagination
  after_action { pagy_headers_merge(@pagy) if @pagy }

  # GET <%= route_url %>
  def index
    @pagy, @<%= plural_table_name %> = pagy(@<%= plural_table_name %>)

    respond_to do |format|
      format.html
      format.json
      format.turbo_stream
    end
  end

  # GET <%= route_url %>/search.json
  def search
    @<%= plural_table_name %> = params[:items].present? ? <%= orm_class.build(class_name) %>.filter_by_id(params[:items]) : <%= class_name %>.accessible_by(current_ability)

    respond_to do |format|
      format.json
      format.turbo_stream
    end
  end

  # GET <%= route_url %>/1
  def show
  end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  def edit
  end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    if @<%= orm_instance.save %>
      redirect_to <%= redirect_resource_name %>, created: I18n.t('<%= singular_table_name %>.message.created')
    else
      render :new, status: :unprocessable_entity
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= redirect_resource_name %>, updated: I18n.t('<%= singular_table_name %>.message.updated'), status: :see_other
    else
      render :edit, status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= orm_instance.destroy %>
    redirect_to <%= index_helper %>_path, deleted: I18n.t('<%= singular_table_name %>.message.destroyed'), status: :see_other, format: :html
  end

  private
  # Use callbacks to share common setup or constraints between actions.
  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = <%= orm_class.find(class_name, "params.expect(:id)") %>
  end

  # Only allow a list of trusted parameters through.
  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_table_name %>, {})
    <%- else -%>
    params.expect(<%= singular_table_name %>: [ <%= permitted_params %> ])
    <%- end -%>
  end

  def set_<%= plural_table_name %>
    @<%= plural_table_name %> = <%= class_name %>.accessible_by(current_ability) || <%= class_name %>.none
    @<%= plural_table_name %> = @<%= plural_table_name %>.send(sort_scope(sort_params[:sort_column].to_s), sort_params[:sort_direction]) if sort_params.present?
    filter_params.each { |attribute, value| @<%= plural_table_name %> = @<%= plural_table_name %>.send(filter_scope(attribute), value) } if filter_params.present?
  end

  def sort_params
    params.permit(:sort_column, :sort_direction)
  end

  def filter_params
    params.permit(:id, <%= permitted_params %>).reject{|key,value| value.blank? }
  end

  def disabled_pagination
    render json: <%= orm_class.all(class_name) %> if params[:items] == 'all'
  end
end
<% end -%>
